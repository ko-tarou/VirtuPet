{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nazuk\\\\Documents\\\\sumapuro\\\\hakkason\\\\VirtuPet\\\\src\\\\pages\\\\select.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nconst Select = () => {\n  const mountRef = useRef(null);\n  useEffect(() => {\n    const mountNode = mountRef.current;\n\n    // シーン、カメラ、レンダラーの設定\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountNode.appendChild(renderer.domElement);\n\n    // ライトの追加\n    const light = new THREE.AmbientLight(0xffffff); // 環境光\n    scene.add(light);\n\n    // GLTFLoaderを作成\n    const loader = new GLTFLoader();\n\n    // **1つ目のモデル（inudake move.glb）をロード**\n    loader.load('/models/inudake move.glb',\n    // ファイルパス\n    gltf => {\n      const model = gltf.scene;\n      camera.position.x = 0; // 必要に応じて調整\n      camera.position.y = radius * Math.sin(angle); // 30度の高さ\n      model.rotation.y = radius * Math.sin(angle2); // 適切な距離を維持\n      camera.lookAt(0, 0, 0); // モデルの中心を向く\n\n      scene.add(model); // シーンに追加\n\n      // アニメーションの再生設定\n      const mixer = new THREE.AnimationMixer(model);\n      gltf.animations.forEach(clip => {\n        mixer.clipAction(clip).play();\n      });\n\n      // アニメーションを更新\n      const clock = new THREE.Clock();\n      const animate = () => {\n        requestAnimationFrame(animate);\n        const delta = clock.getDelta();\n        mixer.update(delta);\n        renderer.render(scene, camera);\n      };\n      animate();\n    }, undefined, error => {\n      console.error('inudake move.glbの読み込みエラー:', error);\n    });\n\n    // **2つ目のモデル（pengin move.glb）をロード**\n    loader.load('/models/pengin move.glb',\n    // ファイルパス\n    gltf => {\n      const model = gltf.scene;\n      model.position.x = 5; // ペンギンの位置を少し右に移動（必要に応じて調整）\n      scene.add(model); // シーンに追加\n\n      // アニメーションの再生設定\n      const mixer = new THREE.AnimationMixer(model);\n      gltf.animations.forEach(clip => {\n        mixer.clipAction(clip).play();\n      });\n\n      // アニメーションを更新\n      const clock = new THREE.Clock();\n      const animate = () => {\n        requestAnimationFrame(animate);\n        const delta = clock.getDelta();\n        mixer.update(delta);\n        renderer.render(scene, camera);\n      };\n      animate();\n    }, undefined, error => {\n      console.error('pengin move.glbの読み込みエラー:', error);\n    });\n\n    // カメラの位置設定\n    camera.position.z = 10;\n    return () => {\n      mountNode.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 10\n    }\n  });\n};\nexport default Select;","map":{"version":3,"names":["React","useEffect","useRef","THREE","GLTFLoader","Select","mountRef","mountNode","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","light","AmbientLight","add","loader","load","gltf","model","position","x","y","radius","Math","sin","angle","rotation","angle2","lookAt","mixer","AnimationMixer","animations","forEach","clip","clipAction","play","clock","Clock","animate","requestAnimationFrame","delta","getDelta","update","render","undefined","error","console","z","removeChild","createElement","ref","style","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/nazuk/Documents/sumapuro/hakkason/VirtuPet/src/pages/select.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n\r\nconst Select = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const mountNode = mountRef.current;\r\n\r\n    // シーン、カメラ、レンダラーの設定\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    mountNode.appendChild(renderer.domElement);\r\n\r\n    // ライトの追加\r\n    const light = new THREE.AmbientLight(0xffffff); // 環境光\r\n    scene.add(light);\r\n\r\n    // GLTFLoaderを作成\r\n    const loader = new GLTFLoader();\r\n\r\n    // **1つ目のモデル（inudake move.glb）をロード**\r\n    loader.load(\r\n      '/models/inudake move.glb', // ファイルパス\r\n      (gltf) => {\r\n        const model = gltf.scene;\r\n\r\n        \r\n\r\n        camera.position.x = 0; // 必要に応じて調整\r\n        camera.position.y = radius * Math.sin(angle); // 30度の高さ\r\n        model.rotation.y = radius * Math.sin(angle2); // 適切な距離を維持\r\n        camera.lookAt(0, 0, 0); // モデルの中心を向く\r\n\r\n        scene.add(model); // シーンに追加\r\n\r\n        // アニメーションの再生設定\r\n        const mixer = new THREE.AnimationMixer(model);\r\n        gltf.animations.forEach((clip) => {\r\n          mixer.clipAction(clip).play();\r\n        });\r\n\r\n        // アニメーションを更新\r\n        const clock = new THREE.Clock();\r\n        const animate = () => {\r\n          requestAnimationFrame(animate);\r\n          const delta = clock.getDelta();\r\n          mixer.update(delta);\r\n          renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n      },\r\n      undefined,\r\n      (error) => {\r\n        console.error('inudake move.glbの読み込みエラー:', error);\r\n      }\r\n    );\r\n\r\n    // **2つ目のモデル（pengin move.glb）をロード**\r\n    loader.load(\r\n      '/models/pengin move.glb', // ファイルパス\r\n      (gltf) => {\r\n        const model = gltf.scene;\r\n        model.position.x = 5; // ペンギンの位置を少し右に移動（必要に応じて調整）\r\n        scene.add(model); // シーンに追加\r\n\r\n        // アニメーションの再生設定\r\n        const mixer = new THREE.AnimationMixer(model);\r\n        gltf.animations.forEach((clip) => {\r\n          mixer.clipAction(clip).play();\r\n        });\r\n\r\n        // アニメーションを更新\r\n        const clock = new THREE.Clock();\r\n        const animate = () => {\r\n          requestAnimationFrame(animate);\r\n          const delta = clock.getDelta();\r\n          mixer.update(delta);\r\n          renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n      },\r\n      undefined,\r\n      (error) => {\r\n        console.error('pengin move.glbの読み込みエラー:', error);\r\n      }\r\n    );\r\n\r\n    // カメラの位置設定\r\n    camera.position.z = 10;\r\n\r\n    return () => {\r\n      mountNode.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: '100vw', height: '100vh' }}></div>;\r\n};\r\n\r\nexport default Select;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}