{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tkota\\\\project_k\\\\hackthon\\\\Web\\\\hackthon2024_11_30\\\\VirtuPet\\\\src\\\\pages\\\\select.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useNavigate } from 'react-router-dom';\nimport '../pages/styles/select.css'; // CSSファイルをインポート\n\nconst Select = () => {\n  const mountRef = useRef(null);\n  const [buttonPositions, setButtonPositions] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const mountNode = mountRef.current;\n\n    // シーン、カメラ、レンダラーの設定\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    mountNode.appendChild(renderer.domElement);\n    const light = new THREE.AmbientLight(0xffffff, 3); // 環境光\n    scene.add(light);\n    const loader = new GLTFLoader();\n    const models = [];\n    const updateButtonPositions = () => {\n      const newPositions = models.map(model => {\n        const vector = new THREE.Vector3();\n        model.getWorldPosition(vector); // モデルのワールド座標を取得\n\n        // 画面座標に変換\n        const screenPosition = vector.clone().project(camera);\n        const x = (screenPosition.x * 0.5 + 0.5) * window.innerWidth;\n        const y = (-screenPosition.y * 0.5 + 0.5) * window.innerHeight + 150; // 150px下に配置\n        return {\n          x,\n          y\n        };\n      });\n      setButtonPositions(newPositions);\n    };\n\n    // モデルをロードして配置\n    const loadModel = (path, initialPosition) => {\n      loader.load(path, gltf => {\n        const model = gltf.scene;\n        model.position.set(initialPosition.x, initialPosition.y, initialPosition.z);\n        scene.add(model);\n        models.push(model);\n\n        // アニメーションの設定\n        const mixer = new THREE.AnimationMixer(model);\n        gltf.animations.forEach(clip => {\n          mixer.clipAction(clip).play();\n        });\n\n        // アニメーション更新\n        const clock = new THREE.Clock();\n        const animate = () => {\n          const delta = clock.getDelta();\n          mixer.update(delta);\n          renderer.render(scene, camera);\n          requestAnimationFrame(animate);\n        };\n        animate();\n        updateButtonPositions();\n      }, undefined, error => {\n        console.error(`${path} の読み込みエラー:`, error);\n      });\n    };\n\n    // モデルをロード\n    loadModel('/models/kitune move big.glb', {\n      x: -7,\n      y: -1,\n      z: 0\n    });\n    loadModel('/models/inudake move big.glb', {\n      x: 0,\n      y: -1,\n      z: 0\n    });\n    loadModel('/models/pengin move big.glb', {\n      x: 7,\n      y: -1,\n      z: 0\n    });\n\n    // リサイズ時にボタン位置を更新\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      updateButtonPositions();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      mountNode.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-select\",\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 2\n    }\n  }, buttonPositions.map((pos, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"button-container\",\n    style: {\n      position: 'absolute',\n      left: `${pos.x}px`,\n      top: `${pos.y}px`,\n      transform: 'translate(-50%, -50%)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: `chara${index + 1}`,\n    onClick: () => navigate('/view'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 3\n    }\n  }, ['きつね', 'いぬ', 'ペンギン'][index]))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 2\n    }\n  }));\n};\nexport default Select;","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","GLTFLoader","useNavigate","Select","mountRef","buttonPositions","setButtonPositions","navigate","mountNode","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","setSize","setClearColor","appendChild","domElement","light","AmbientLight","add","loader","models","updateButtonPositions","newPositions","map","model","vector","Vector3","getWorldPosition","screenPosition","clone","project","x","y","loadModel","path","initialPosition","load","gltf","position","set","z","push","mixer","AnimationMixer","animations","forEach","clip","clipAction","play","clock","Clock","animate","delta","getDelta","update","render","requestAnimationFrame","undefined","error","console","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","createElement","className","style","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","pos","index","key","left","top","transform","onClick","ref","width","height"],"sources":["C:/Users/tkota/project_k/hackthon/Web/hackthon2024_11_30/VirtuPet/src/pages/select.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../pages/styles/select.css'; // CSSファイルをインポート\r\n\r\nconst Select = () => {\r\nconst mountRef = useRef(null);\r\nconst [buttonPositions, setButtonPositions] = useState([]);\r\nconst navigate = useNavigate();\r\n\r\nuseEffect(() => {\r\n\tconst mountNode = mountRef.current;\r\n\r\n\t// シーン、カメラ、レンダラーの設定\r\n\tconst scene = new THREE.Scene();\r\n\tconst camera = new THREE.PerspectiveCamera(\r\n\t30,\r\n\twindow.innerWidth / window.innerHeight,\r\n\t0.1,\r\n\t1000\r\n\t);\r\n\tconst renderer = new THREE.WebGLRenderer({ alpha: true });\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\trenderer.setClearColor(0x000000, 0);\r\n\tmountNode.appendChild(renderer.domElement);\r\n\r\n\tconst light = new THREE.AmbientLight(0xffffff, 3); // 環境光\r\n\tscene.add(light);\r\n\r\n\tconst loader = new GLTFLoader();\r\n\tconst models = [];\r\n\r\n\tconst updateButtonPositions = () => {\r\n\tconst newPositions = models.map((model) => {\r\n\t\tconst vector = new THREE.Vector3();\r\n\t\tmodel.getWorldPosition(vector); // モデルのワールド座標を取得\r\n\r\n\t\t// 画面座標に変換\r\n\t\tconst screenPosition = vector.clone().project(camera);\r\n\t\tconst x = (screenPosition.x * 0.5 + 0.5) * window.innerWidth;\r\n\t\tconst y = (-screenPosition.y * 0.5 + 0.5) * window.innerHeight + 150; // 150px下に配置\r\n\t\treturn { x, y };\r\n\t});\r\n\tsetButtonPositions(newPositions);\r\n\t};\r\n\r\n\t// モデルをロードして配置\r\n\tconst loadModel = (path, initialPosition) => {\r\n\tloader.load(\r\n\t\tpath,\r\n\t\t(gltf) => {\r\n\t\tconst model = gltf.scene;\r\n\t\tmodel.position.set(initialPosition.x, initialPosition.y, initialPosition.z);\r\n\t\tscene.add(model);\r\n\t\tmodels.push(model);\r\n\r\n\t\t// アニメーションの設定\r\n\t\tconst mixer = new THREE.AnimationMixer(model);\r\n\t\tgltf.animations.forEach((clip) => {\r\n\t\t\tmixer.clipAction(clip).play();\r\n\t\t});\r\n\r\n\t\t// アニメーション更新\r\n\t\tconst clock = new THREE.Clock();\r\n\t\tconst animate = () => {\r\n\t\t\tconst delta = clock.getDelta();\r\n\t\t\tmixer.update(delta);\r\n\t\t\trenderer.render(scene, camera);\r\n\t\t\trequestAnimationFrame(animate);\r\n\t\t};\r\n\t\tanimate();\r\n\r\n\t\tupdateButtonPositions();\r\n\t\t},\r\n\t\tundefined,\r\n\t\t(error) => {\r\n\t\tconsole.error(`${path} の読み込みエラー:`, error);\r\n\t\t}\r\n\t);\r\n\t};\r\n\r\n\t// モデルをロード\r\n\tloadModel('/models/kitune move big.glb', { x: -7, y: -1, z: 0 });\r\n\tloadModel('/models/inudake move big.glb', { x: 0, y: -1, z: 0 });\r\n\tloadModel('/models/pengin move big.glb', { x: 7, y: -1, z: 0 });\r\n\r\n\t// リサイズ時にボタン位置を更新\r\n\tconst handleResize = () => {\r\n\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\tcamera.aspect = window.innerWidth / window.innerHeight;\r\n\tcamera.updateProjectionMatrix();\r\n\tupdateButtonPositions();\r\n\t};\r\n\twindow.addEventListener('resize', handleResize);\r\n\r\n\treturn () => {\r\n\twindow.removeEventListener('resize', handleResize);\r\n\tmountNode.removeChild(renderer.domElement);\r\n\t};\r\n}, []);\r\n\r\nreturn (\r\n\t<div className=\"container-select\" style={{ position: 'relative' }}>\r\n\t{buttonPositions.map((pos, index) => (\r\n\t\t<div\r\n\t\tkey={index}\r\n\t\tclassName=\"button-container\"\r\n\t\tstyle={{\r\n\t\t\tposition: 'absolute',\r\n\t\t\tleft: `${pos.x}px`,\r\n\t\t\ttop: `${pos.y}px`,\r\n\t\t\ttransform: 'translate(-50%, -50%)',\r\n\t\t}}\r\n\t\t>\r\n\t\t<button className={`chara${index + 1}`} onClick={() => navigate('/view')}>\r\n\t\t\t{['きつね', 'いぬ', 'ペンギン'][index]}\r\n\t\t</button>\r\n\t\t</div>\r\n\t))}\r\n\t<div ref={mountRef} style={{ width: '100vw', height: '100vh' }}></div>\r\n\t</div>\r\n);\r\n};\r\n\r\nexport default Select;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}